# Generated by Django 3.0.6 on 2020-06-15 00:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Name')),
                ('phone_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone code')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone number')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='Phone Verified')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('gender',
                 models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True,
                                  verbose_name='Gender')),
                ('membership', models.CharField(blank=True, choices=[('N', 'New'), ('A', 'Active'), ('G', 'Golden'),
                                                                     ('U', 'Ultimate')], max_length=1, null=True,
                                                verbose_name='Membership')),
                ('address', models.CharField(blank=True, max_length=1000, verbose_name='Address')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Photo')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, verbose_name='Code')),
                ('type',
                 models.CharField(choices=[('E', 'Email'), ('P', 'Phone')], max_length=2, verbose_name='Gender')),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_update_time', models.DateTimeField(auto_now=True, null=True)),
                ('verified', models.BooleanField(verbose_name='Verified')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps',
                                           to=settings.AUTH_USER_MODEL, verbose_name='OTP')),
            ],
        ),
        migrations.CreateModel(
            name='EmailOTP',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.otp',),
        ),
        migrations.CreateModel(
            name='PhoneOTP',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.otp',),
        ),
    ]
