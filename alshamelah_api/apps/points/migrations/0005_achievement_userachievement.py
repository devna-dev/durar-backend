# Generated by Django 3.0.8 on 2020-07-12 07:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('points', '0004_auto_20200703_0354'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_update_time', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('pages_read_number', 'Reading x number of pages'), ('books_read_finished', 'Finishing x number of books (Physical books)'), ('writing_review', 'Writing a review on the book (Per Book)'), ('writing_note', 'Write a note (in the notepad or in the book) Per note'), ('highlighting_text', 'Highlighting text in a book'), ('making_bookmark', 'Bookmarking a page in a book - per bookmark'), ('attending_lecture', 'Attending a lecture'), ('rating_book', 'Review / rate a book or audio book (Like or dislike)'), ('share_book', 'Share book'), ('share_app', 'Share App'), ('share_lecture', 'Share lecture'), ('share_highlight', 'Share Highlighted text from book'), ('donation', 'Donating (Number of times donated)'), ('consecutive_daily_usage', 'Using the app daily for x amount of consecutive days(Once a day per day)'), ('minutes_listened', 'Listening to x number of minutes of audio book (Accumulated in minutes)'), ('books_listened', 'Finishing x number of audio books'), ('books_with_most_pages_finished', 'Finishing a book that is at least x number of pages (books of 100 pages +)'), ('books_with_most_minutes_finished', 'Finishing an audio book that is at least x number of minutes (120 Minutes +)'), ('books_read_number', 'Read part of x number of books - physical book'), ('books_listen_number', 'Listen to part of x number of audio books (jumping from one book to another) - audio'), ('daily_books_read_number', 'Read part of x number of books in one day (Jumping from one book to another in one day)'), ('daily_books_listen_number', 'Listen to part of x number of audio books in one day - same for audio')], max_length=50, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Achievement Title')),
                ('bronze', models.PositiveSmallIntegerField(verbose_name='Required number for bronze')),
                ('silver', models.PositiveSmallIntegerField(verbose_name='Required number for silver')),
                ('gold', models.PositiveSmallIntegerField(verbose_name='Required number for gold')),
                ('diamond', models.PositiveSmallIntegerField(verbose_name='Required number for diamond')),
                ('bronze_icon', models.ImageField(upload_to='achievements/icons/bronze-icon', verbose_name='Bronze Achievement Icon')),
                ('silver_icon', models.ImageField(upload_to='achievements/icons/silver-icon', verbose_name='Silver Achievement Icon')),
                ('gold_icon', models.ImageField(upload_to='achievements/icons/gold-icon', verbose_name='Gold Achievement Icon')),
                ('diamond_icon', models.ImageField(upload_to='achievements/icons/diamond-icon', verbose_name='Diamond Achievement Icon')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_update_time', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('diamond', 'Diamond')], max_length=10, verbose_name='Type')),
                ('achievement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='achievements', to='points.Achievement', verbose_name='Achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
